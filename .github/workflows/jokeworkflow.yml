name: Daily README Update

on:
  schedule:
    - cron: '0 0 * * *'  # Run daily at midnight
  workflow_dispatch:  # Allow manual trigger

jobs:
  update-readme:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          repository: ${{ secrets.USERNAME }}/${{ secrets.USERNAME }}
          token: ${{ secrets.SECRET }}
      
      - name: Fetch joke
        run: |
          JOKE_DATA=$(curl -s ${{ secrets.JOKE_URL }})
          SETUP=$(echo $JOKE_DATA | jq -r '.setup')
          PUNCHLINE=$(echo $JOKE_DATA | jq -r '.punchline')
          cat << EOF > joke.txt
          <details>
            <summary>$SETUP</summary>
            
            $PUNCHLINE
          </details>
          EOF
          echo "Joke content:"
          cat joke.txt

      - name: Fetch latest blog posts
        run: |
          BLOG_DATA=$(curl -s https://atakangul.com/blogs/most-viewed)
          echo "Raw API response:"
          echo "$BLOG_DATA"
          
          if jq -e . >/dev/null 2>&1 <<<"$BLOG_DATA"; then
            echo $BLOG_DATA | jq -r '
              if type == "array" then .[0:3]
              else . end
              | if type == "array" then
                  map(
                    "- **" + (.title // "No Title") + "**\n" +
                    "  - Topic: " + (.description // "No Description") + "\n" +
                    "  - [Read Article](https://atakangul.com/blogs/" + (.url // "") + ")"
                  ) | join("\n\n")
                else "Error: Unexpected data structure"
              end
            ' > blog_posts.txt
          else
            echo "Error: Invalid JSON response from API" > blog_posts.txt
          fi
          
          echo "Processed blog posts:"
          cat blog_posts.txt
          
          if [ ! -s blog_posts.txt ]; then
            echo "Warning: blog_posts.txt is empty!"
          fi

      - name: Update README
        run: |
          CURRENT_DATE=$(date +"%B %d, %Y")
          echo "Current date: $CURRENT_DATE"
          
          echo "Original README content:"
          cat README.md
          
          awk -v date="$CURRENT_DATE" '
          BEGIN { 
            joke = 0; blog = 0; 
            print "DEBUG: Starting awk script" > "/dev/stderr"
          }
          /^## You like jokes\?/ {
            print "DEBUG: Found joke section" > "/dev/stderr"
            print
            system("cat joke.txt")
            joke = 1
            next
          }
          joke && /^## What I focus on The Most/ { 
            print "DEBUG: Ending joke section" > "/dev/stderr"
            joke = 0 
          }
          /^## Latest Articles/ {
            print "DEBUG: Found blog section" > "/dev/stderr"
            print
            system("cat blog_posts.txt")
            print "---"
            print "Last updated:", date
            blog = 1
            next
          }
          blog && /^---/ { 
            print "DEBUG: Ending blog section" > "/dev/stderr"
            blog = 0; next 
          }
          !joke && !blog { print }
          END {
            print "DEBUG: Finished awk script" > "/dev/stderr"
          }
          ' README.md > README.tmp && mv README.tmp README.md
          
          echo "Updated README content:"
          cat README.md

      - name: Commit and push changes
        run: |
          git config --local user.email ${{ secrets.EMAIL }}
          git config --local user.name ${{ secrets.USERNAME }}
          git add README.md
          echo "Git diff:"
          git diff --cached
          git commit -m "Update README with latest joke and blog posts" || exit 0
          git push https://${{ secrets.SECRET }}@github.com/${{ secrets.USERNAME }}/${{ secrets.USERNAME }}.git
